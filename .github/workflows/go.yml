name: Go
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Clone down repository
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - name: Build frontend
      run: |
        cd ./frontend 
        go build frontend
    - name: Build backend
      run: |
        cd ./backend
        go build backend
    - name: Test frontend
      run: |
        cd ./frontend
        go test frontend
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Run linting on frontend
        uses: golangci/golangci-lint-action@v8
        with:
          working-directory: frontend
      - name: Run linting on backend
        uses: golangci/golangci-lint-action@v8
        with:
          working-directory: backend
  publish_images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile_frontend
          push: true
          tags: magnusthomsen/sfc_frontend:latest
          cache-from: type=registry,ref=magnusthomsen/sfc_frontend:latest
          cache-to: type=inline

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile_backend
          push: true
          tags: magnusthomsen/sfc_backend:latest
          cache-from: type=registry,ref=magnusthomsen/sfc_backend:latest
          cache-to: type=inline
  deploy:
    runs-on: ubuntu-latest
    needs: [publish_images]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
      - run: kubectl --kubeconfig kubeconfig apply -f ./kubernetes_config
      - run: curl http://16.16.209.64:32218/healthz
  test-availability:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build test-version with Docker Compose
        run: |
            docker compose up -d --wait 
            curl http://localhost:8080/healthz
      - name: Clean up
        run: docker compose down
